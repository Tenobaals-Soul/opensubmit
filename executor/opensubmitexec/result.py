'''
Results that can be generated by executor functions
and may be send back to the server.
'''

from subprocess import CompletedProcess

UNSPECIFIC_ERROR=-9999

class Result():
    '''
        A validation result that can be sent to the OpenSubmit Server.
    '''
    error_code = None                 # Error code from execution
    info = ''                         # Information text for the student and tutors
    info_tutor = ''                   # Information text for the tutors only

    def __init__(self, subprocess_result=None, max_length=10000):
        '''
            Creates a new OpenSubmit result object from a compile / test run result.
        '''
        if subprocess_result:
            self.convert(subprocess_result, max_length);

    def is_ok(self):
        return self.error_code==0

    def convert(self, subprocess_result, max_length):
        # There are cases where the program was not finished, but we still deliver a result
        # Transmitting "None" is a bad idea, so we use a special code instead
        if subprocess_result.returncode==None:
            self.error_code=UNSPECIFIC_ERROR
        else:
            self.error_code=subprocess_result.returncode
        if subprocess_result.stdout:
            if max_length:
                self.info_student=subprocess_result.stdout[0:max_length-20]+"\n[Output truncated]"
                self.info_tutor  =subprocess_result.stdout[0:max_length-20]+"\n[Output truncated]"
            else:
                self.info_student=subprocess_result.stdout
                self.info_tutor  =subprocess_result.stdout
        self.perf_data=''


class PassResult(Result):
    '''
        A validation result indication success.
    '''
    def __init__(self, info_student=''):
        super().__init__()
        self.error_code=0
        self.info_student=info_student

    def __str__(self):
        return self.info_student

class FailResult(Result):
    '''
        A validation result indication failure.
    '''
    def __init__(self, info_student='', error_code=UNSPECIFIC_ERROR):
        super().__init__()
        self.error_code=error_code
        self.info_student=info_student

    def __str__(self):
        return self.info_student


class ValidatorBrokenResult(Result):
    '''
        A validation result indicating a programming bug in the test script.
    '''
    def __init__(self, info_tutor=''):
        super().__init__()
        self.error_code=UNSPECIFIC_ERROR
        self.info_tutor=info_tutor
        self.info_student='Sorry, there is an internal problem with the validation. Please inform your tutors.'

    def __str__(self):
        return self.info_tutor

class ExecutorBrokenResult(Result):
    '''
        A validation result indicating a programming bug in the executor code.
    '''
    def __init__(self, info_tutor=''):
        super().__init__()
        self.error_code=UNSPECIFIC_ERROR
        self.info_tutor=info_tutor
        self.info_student='Sorry, there is an internal problem with the executor. Please inform your tutors.'

    def __str__(self):
        return self.info_tutor
